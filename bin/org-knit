#!/usr/bin/env sh
":"; exec emacs --quick --script "$0" -- "$@" # -*- mode: emacs-lisp; lexical-binding: t; -*-
;;; bin/org-knit

;; Usage: org-knit [OPTIONS] [TARGETS...]
;;
;; A command line interface for weaving (exporting) and tangling org-mode files.
;; TARGETS can be files of folders (which are searched for org files recursively).
;;
;; This is useful for automated generation of files,
;; and integration with other scripts.
;;
;; Example:
;;   org-knit some-file.org
;;   org-knit -f pdf book/chapters/
;;   org-knit -t -f ascii,md scripts.org
;;
;; Options:
;;   -a, --alias [FORMATS] Give the org function called by a particlar alias.
;;                         List all aliases when no format or other arguments are given
;;   -c, --clean           Delete all non-org files which share their basename
;;   -e, --exec            Execute src blocks in the file before exporting
;;   -f, --format FORMATS  Export formats (comma seperated, no space), html by default
;;   -j, --jobs            Number of jobs executed in parallel
;;   -l, --load            Elisp files to load
;;   -s, --sync            Perform the exporting/tangling synchronously
;;   -t, --tangle          Also tangle the file(s).
;;                         See org-tangle for more advanced functionallity
;;    -q, --quiet          Suppress the output of status information
;;    -                    Output to stdout instead of writing to files

;; TODO output dir(s) [see org publish]

(require 'cl-lib)
(require 'ox)
(require 'ob-tangle)

;;
;;; Capabilities

(defvar export-specs
  '((html   :backend html   :extension ".html" :requires ox-html)
    (md     :backend md     :extension ".md"   :requires ox-md)
    (gfm    :backend gfm    :extension ".md"   :requires ox-gfm)
    (rtf    :backend rtf    :extension ".rtf"  :requires ox-pandoc)
    (ascii  :backend ascii  :extension ".txt"  :requires ox-ascii)
    (pdf    :backend latex  :extension ".tex"  :requires ox-latex  :post-action org-latex-compile)
    (beamer :backend beamer :extension ".tex"  :requires ox-beamer :post-action org-latex-compile)
    (tex    :backend latex  :extension ".tex"  :requires ox-latex)
    (latex  :backend latex  :extension ".tex"  :requires ox-latex)
    (odt    :backend odt    :extension ".odt"  :requires ox-odt)
    (org    :backend org    :extension ".org"  :requires ox-org)
    (docx   :backend docx   :extension ".docx" :requires ox-pandoc)))

;; Fetch number of CPU threads
;; This is needed early on as it is referenced in the help string

(defun num-cpus ()
  (let ((cpus
         (cond ((eq 'windows-nt system-type)
                (w32-get-nproc))
               ((getenv "NUMBER_OF_PROCESSORS"))
               ((executable-find "nproc")
                (shell-command-to-string "nproc"))
               ((executable-find "sysctl")
                (shell-command-to-string "sysctl -n hw.ncpu")))))
    (max
     1 (or (cl-typecase cpus
             (string
              (condition-case _
                  (string-to-number cpus)
                (wrong-type-argument
                 (user-error "NUMBER_OF_PROCESSORS contains an invalid value: %S"
                             cpus))))
             (consp
              (if (zerop (car cpus))
                  (string-to-number (cdr cpus))
                (user-error "Failed to look up number of processors, because:\n\n%s"
                            (cdr cpus)))))
           1))))

(defun num-jobs-default ()
  (let ((cpus (num-cpus)))
    (if (> cpus 4)
        (- cpus 2)
      cpus)))

;;
;;; Help

;; Info page
(defun usage ()
  (with-temp-buffer
    (insert (format "%s %s [OPTIONS] [TARGETS...]\n"
                    "[1mUsage:[0m"
                    (file-name-nondirectory load-file-name))
            "\n"
            "A command line interface for weaving (exporting) and tangling org-mode files.\n"
            "TARGETS can be files of folders (which are searched for org files recursively).\n"
            "\n"
            "This is useful for automated generation of files,\n"
            "and integration with other scripts.\n"
            "\n"
            "[1mExample:[0m\n"
            "  org-knit some-file.org\n"
            "  org-knit -f pdf book/chapters/\n"
            "  org-knit -t -f ascii,md scripts.org\n"
            "\n"
            "[1mOptions:[0m\n"
            "  -a, --alias [FORMATS]\tGive the org function called by a particlar alias.\n"
            "  \t\t\tList all aliases when no format or other arguments are given\n"
            "  -c, --clean\t\tDelete all non-org files which share their basename\n"
            "  -e, --exec\t\tExecute src blocks in the file before exporting\n"
            "  -f, --format FORMATS\tExport formats (comma seperated, no space), [2mhtml[0m by default\n"
            "  -j, --jobs\t\tNumber of jobs executed in parallel (" (number-to-string (num-jobs-default)) " by default)\n"
            "  -l, --load\t\tElisp files to load\n"
            "  -s, --sync\t\tPerform the exporting/tangling synchronously\n"
            "  -t, --tangle\t\tAlso tangle the file(s).\n"
            "  \t\t\tSee [4morg-tangle[0m for more advanced functionallity\n"
            "  -q, --quiet\t\tSuppress the output of status information\n"
            "  -   \t\t\tOutput to stdout instead of writing to files\n"
            )
    (princ (buffer-string))))

;; Format alias page

(defun format-alias (alias)
  (let ((name        (car alias))
        (backend     (plist-get (cdr alias) :backend))
        (ext         (plist-get (cdr alias) :extension))
        (post-action (plist-get (cdr alias) :post-action))
        (requirement (plist-get (cdr alias) :requires)))
    (let ((requirement-avalible
           (if requirement
               (require requirement nil t)
             t)))
      (format "  %s%-8s[0m\t%s%-16s\t[2m%s[0m%s\t%s"
              (if requirement-avalible "[1m" "[1;90m")
              name
              (if requirement-avalible "" "[9m[2m")
              (concat (symbol-name backend) "[0m")
              ext
              (if post-action
                  (format "\t[0;90m+ %s[0m " (symbol-name post-action))
                "")
              (if requirement-avalible ""
                (format "[0;33m(requires %s)[0m" (symbol-name requirement)))))))

(defun print-alias (&optional aliases)
  (with-temp-buffer
    (insert
     (format-alias '(Format :backend Backend :extension ".extension"))
     "\n â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n"
     (replace-regexp-in-string
      "\n--NONE--" ""
      (mapconcat (lambda (alias)
                   (if aliases
                       (if (memq (car alias) aliases)
                           (format-alias alias) "--NONE--")
                     (format-alias alias)))
                 export-specs "\n"))
     "\n")
    (princ (buffer-string))))

;;
;;; Export state tracking

(defvar export-progress nil
  "Structure: ((file . ((backend . status) (backend . status)...)...)")

(defun set-state (file format state)
  (unless (listp format)
    (setq format (list format)))
  (dolist (fmt format)
    (setf (cdr (assoc fmt (cdr (assoc file export-progress)))) state))
  (export-progress-table (and async (> last-progress 1)))
  (unless async (sleep-for 0.1)))

;;
;;; Process the input

;; Store flags and arguments
(defvar tangle nil)
(defvar exec nil)
(defvar async t)
(defvar jobs nil)
(defvar formats nil)
(defvar files nil)
(defvar clean nil)
(defvar load-files nil)
(defvar quiet nil)
(defvar stdout nil)

;; Be less noisy
(setq inhibit-message t)

;; Parse flags and arguments
(pop argv)
(while argv
  (let ((arg (pop argv)))
    (pcase arg
      ((or "-h" "--help")
       (usage)
       (kill-emacs 0))
      ((or "-a" "--alias")
       (let ((aliases (pop argv)))
         (when aliases
           (setq aliases
                 (mapcar #'intern (split-string aliases ","))))
         (print-alias aliases))
       (kill-emacs 0))
      ((or "-c" "--clean")
       (setq clean t))
      ((or "-e" "--exec")
       (setq exec t))
      ((or "-f" "--formats")
       (setq formats
             (mapcar #'intern (split-string (pop argv) ",")))
       (mapcar
        (lambda (f)
          (unless (assoc f export-specs)
            (princ (format " [1;31m![0m Format '%s' is not recognised\n" f) #'external-debugging-output)
            (kill-emacs 1)))
        formats))
      ((or "-j" "--jobs")
       (setq jobs (string-to-number (pop argv))))
      ((or "-l" "--load")
       (let ((f (pop argv)))
         (when (file-exists-p f)
           (push f load-files))))
      ((or "-s" "--sync")
       (setq async nil))
      ((or "-t" "--tangle")
       (setq tangle t))
      ((or "-d" "--debug")
       (setq debug-on-error t))
      ((or "-q" "--quiet")
       (setq quiet t))
      ("-"
       (setq stdout t))
      ((guard (file-exists-p arg))
       (push arg files))
      (_
       (princ (format " [1;33m![0m Ignoring unknown option or file: %s\n" arg) #'external-debugging-output)))))

;; Validate/expand the arguments

(when tangle
  (push 'tang formats))

(when (null formats)
  (princ (format " [1;33m![0m No actions to perform\n") #'external-debugging-output)
  (kill-emacs 0))

(if (not (null files))
    (setq files (reverse files))
  (princ " [1;31m![0m No target files provided\n" #'external-debugging-output)
  (kill-emacs 1))

;; When it's only one file and format there's no benefit in async
(when (= 1 (length files) (length formats))
  (setq async nil))

(dolist (location files)
  (when (file-directory-p location)
    (setq files
          (append (remove location files)
                  (directory-files-recursively location "\\.org\\'" nil)))))

(dolist (file files)
  (setq export-progress
        (append export-progress
                (list (append (list file)
                              (apply #'append
                                     (mapcar
                                      (lambda (f) (list (cons f 'waiting)))
                                      formats)))))))

(when (and async (not jobs))
  (setq jobs (num-jobs-default)))

(defun +info (fmt &rest args)
  (unless quiet
    (princ (if args (apply fmt args) fmt) #'external-debugging-output)))

(when stdout
  (+info " [1;33m![0m Outputting to stdout\n"))

;; Backported from Emacs 28

(defun string-pad (string length &optional padding start)
  "Pad STRING to LENGTH using PADDING.
If PADDING is nil, the space character is used.  If not nil, it
should be a character.

If STRING is longer than the absolute value of LENGTH, no padding
is done.

If START is nil (or not present), the padding is done to the end
of the string, and if non-nil, padding is done to the start of
the string."
  (unless (natnump length)
    (signal 'wrong-type-argument (list 'natnump length)))
  (let ((pad-length (- length (length string))))
    (if (< pad-length 0)
        string
      (concat (and start
                   (make-string pad-length (or padding ?\s)))
              string
              (and (not start)
                   (make-string pad-length (or padding ?\s)))))))

;;
;;; Export state visuals

(defvar last-progress 0)
(defvar export-progress-states
  '((waiting . "[0;33mâ ¶[0m")
    (progress-colour . "[0;36m")
    (progress-progression . ("â –" "â ²" "â ´" "â ¦"))
    (started . nil)
    (executing . "[0;33mâ ”[0m")
    (tangling . "[0;35mâ ¶[0m")
    (completed . "[0;32mâœ“[0m")
    (error . "[0;31m![0m")))

(defvar longest-file-str (apply #'max (mapcar #'length files)))
(defvar longest-format-str (apply #'max (mapcar (lambda (f) (length (symbol-name f))) formats)))

(defun export-progress-table (&optional no-progress-rotation)
  (unless no-progress-rotation
    (setq last-progress (1+ last-progress)))
  (setf (cdr (assoc 'started export-progress-states))
        (concat (cdr (assoc 'progress-colour export-progress-states))
                (nth (% last-progress
                        (length (cdr (assoc 'progress-progression export-progress-states))))
                     (cdr (assoc 'progress-progression export-progress-states)))
                "[0m"))
  (with-temp-buffer
    (insert
     (if (> last-progress 1)
         (apply #'concat (make-list (+ 2 (length export-progress)) "[1A[K"))
       "")
     " [1m"
     (string-pad "File" longest-file-str) "  "
     (mapconcat (lambda (fmt)
                  (if (eq fmt 'tang)
                      (concat "[0m[2m[3m" (string-pad "t" longest-format-str) "[0m[1m")
                    (string-pad (symbol-name fmt) longest-format-str)))
                formats " ")
     "[0m\n "
     (make-string
      (+ longest-file-str
         (* (length formats) (1+ longest-format-str)))
      ?â”€)
     "\n"
     (mapconcat
      (lambda (f)
        (concat
         " "
         (string-pad (car f) longest-file-str)
         "  "
         (mapconcat
          (lambda (state)
            (string-pad (cdr (assoc (cdr state) export-progress-states))
                        (+ 11 longest-format-str)))
          (cdr f) " ")
         ))
      export-progress "\n")
     "\n")
    (+info (buffer-string))))

;;
;;; Stdout utilities

(defvar stdout-tmp-files nil)
(defvar stdout-tmp-dir temporary-file-directory)

(defun stdoutify-file (file outfile)
  (if stdout
      (cdar (push
             (cons file
                   (expand-file-name (file-name-nondirectory outfile) temporary-file-directory))
             stdout-tmp-files))
    outfile))

;; Tangling & stdout

(when (and stdout tangle)
  (setq tangle-buffer (get-buffer-create "tangle-buff"))
  (defun *org-babel-tangle (fn &rest args)
    "Don't write tangled blocks to files, print them to stdout."
    (cl-letf (((symbol-function 'write-region)
               (lambda (start end filename &optional append visit lockname mustbenew)
                 (insert "\n")
                 (append-to-buffer tangle-buffer (point-min) (point-max)))))
      (apply fn args)))
  (advice-add #'org-babel-tangle :around #'*org-babel-tangle))

;;
;;; Export dispatching

(defun export-file (file spec &optional out-file)
  "FILE to export according to SPEC plist (from `export-specs')"
  (let ((pandoc-p (eq (plist-get (cdr spec) :requires) 'ox-pandoc))
        (requirement (plist-get (cdr spec) :requires))
        (backend     (plist-get (cdr spec) :backend))
        (ext         (plist-get (cdr spec) :extension))
        (post-action (plist-get (cdr spec) :post-action)))

    (when (and requirement (not async))
      (require requirement))

    (unless out-file
      (setq out-file (stdoutify-file file (org-export-output-file-name ext nil))))
    (if pandoc-p
        (org-pandoc-export backend async nil nil nil nil nil)
      (+org-export-to-file backend out-file async nil nil nil nil post-action (car spec) file))
    (when async
      (export-register-async-process file (car spec) (caddar org-export-stack-contents)))))

(defun +org-export-to-file (backend file &optional async subtreep visible-only body-only ext-plist post-process +format +infile)
  (if (and +format (not (eq backend 'pandoc)))
      (progn
        (set-state +infile +format 'started)
        (funcall #'org-export-to-file
                 backend file async subtreep visible-only body-only ext-plist
                 (cond
                  ((and post-process async) `#',post-process)
                  (post-process
                   `(lambda (file)
                      (funcall #',post-process file)
                      (set-state ,+infile ',+format 'completed)))
                  (t `(lambda (file) (set-state ,+infile ',+format 'completed))))))
    (funcall #'org-export-to-file backend file async subtreep visible-only body-only ext-plist post-process)))

;;
;;; Async process management

(defvar export-async-job-queue nil
  "Queue of (file format) specs to be exported.")

(defvar export-async-processes nil
  "Structure: ((#<process> . (file . format))...)")

(defun export-register-async-process (file format process)
  (push (cons process (cons file format)) export-async-processes))

(defun export-check-async-processes ()
  (when export-async-processes
    (setq export-async-processes
          (delq nil
                (mapcar
                 (lambda (proc-spec)
                   (let ((proc (car proc-spec))
                         (file (cadr proc-spec))
                         (xformat (cddr proc-spec)))
                     (if (not (memq (process-status (car proc-spec)) '(exit failed)))
                         proc-spec
                       (if (= 0 (process-exit-status proc))
                           (set-state file xformat 'completed)
                         (set-state file xformat 'error)
                         (record-error file (symbol-name xformat)
                                       (concat
                                        "[3;90m"
                                        (mapconcat #'identity (process-command proc) " ")
                                        "[0m\n  "
                                        (with-current-buffer (process-buffer proc)
                                          (buffer-string)))))
                       nil)))
                 export-async-processes)))
    (export-async-maybe-pop-queue)
    t))

(defun export-async-maybe-pop-queue ()
  (when (and export-async-job-queue
             (< (length export-async-processes) jobs))
    (dotimes (_ (- jobs (length export-async-processes)))
      (when-let ((task (pop export-async-job-queue)))
        (let (org-mode-hook org-confirm-babel-evaluate)
          (with-current-buffer (find-file-noselect (car task))
            (apply #'export-file task)))))))

;;
;;; Error management

(defvar recorded-errors nil
  "Structure: ((file . ((stage . (msg1 msg2...))...)...)")

(defun record-error (file stage message)
  "Record error MESSAGE with FILE at STAGE to `recorded-errors'."
  (if-let ((file-entry (assoc file recorded-errors)))
      (if-let ((stage-entry (assoc stage (cdr file-entry))))
          (push message (cdr stage-entry))
        (push (cons stage (list message)) (cdr file-entry)))
    (push (cons file (list (cons stage (list message)))) recorded-errors)))
(defun print-errors ()
  "Print all `recorded-errors'."
  (with-temp-buffer
    (insert
     "\n[1;31mErrors:[0m\n"
     (mapconcat
      (lambda (file-errs)
        (let* (errs-stages current-stages)
          (dolist (stage (cdr file-errs))
            (dolist (err (cdr stage))
              (if (assoc err errs-stages)
                  (progn
                    (push (car stage) (cdr (assoc err errs-stages)))
                    (sort (cdr (assoc err errs-stages))
                          (lambda (a b)
                            (< (cl-position (intern a) formats)
                               (cl-position (intern b) formats)))))
                (push (cons err (list (car stage))) errs-stages))))
          (sort errs-stages
                (lambda (a b)
                  (or (< (cl-position (intern (cadr a)) formats)
                         (cl-position (intern (cadr b)) formats)))
                  (> (length a) (length b))))
          (mapconcat
           (lambda (err-stages)
             (concat
              (unless (string= (car err-stages) current-stages)
                (format " [0;31m%s[0m ([0;33m%s[0m):\n"
                        (car file-errs)
                        (mapconcat 'identity (cdr err-stages) ",")))
              "    "
              (replace-regexp-in-string
               "\\(\".*[^\\]\"\\)"
               "[0;32m\\1[0m" (car err-stages))))
           errs-stages "\n")))
      (sort recorded-errors
            (lambda (a b)
              (< (cl-position a files :test #'string=)
                 (cl-position b files :test #'string=))))
      "\n") "\n")
    (+info (buffer-string))))

;;
;;; Prepare for execution

(unless clean
  (export-progress-table))

(unless async
  (dolist (l load-files)
    (load l nil t)))

(when async
  (setq all-requirements
        (delq nil
              (mapcar
               (lambda (fmt)
                 (plist-get (cdr (assoc fmt export-specs)) :requires))
               formats)))
  (setq org-export-async-init-file (make-temp-file "org-async-export-"))
  (with-temp-file org-export-async-init-file
    (prin1 `(progn (setq org-export-async-debug ,debug-on-error
                         load-path ',load-path)
                   (setq load-files ',load-files)
                   (dolist (l load-files)
                     (load l nil t))
                   (require 'ox)
                   (dolist (req ',all-requirements)
                     (require req)))
           (current-buffer))))

(setq backup-inhibited t) ; we do this ourself

;; Execution helper functions

(defun process-org-file (file)
  (let ((backup (make-temp-file (file-name-base file) nil ".backup.org"))
        (file-basename (file-name-base file)))
    (if clean
        (dolist (child-file (directory-files (file-name-directory (expand-file-name file))))
          (when (and
                 (string= (file-name-base child-file) file-basename)
                 (not (string= (file-name-extension child-file) "org")))
            (+info "Deleting %s\n" child-file)
            (delete-file child-file)))
      (unwind-protect
          (progn
            ;; We do the ol' switcheroo because `org-babel-tangle' writes
            ;; changes to the current file, which would be imposing on the user.
            (copy-file file backup t)
            (process-org-file-1 file))
        (ignore-errors (copy-file backup file t))
        (ignore-errors (delete-file backup))))))

(advice-add #'yes-or-no-p :before #'debug)

(defun process-org-file-1 (file)
  ;; Prevent slow hooks from interfering
  (let (org-mode-hook org-confirm-babel-evaluate org-babel-pre-tangle-hook)
    (with-current-buffer (create-file-buffer (expand-file-name file))
      (setq buffer-file-name (expand-file-name file))
      (insert-file-contents file)
      (org-mode)
      (when exec
        (set-state file formats 'executing)
        (org-babel-eval-wipe-error-buffer)
        (setq pre-exec-hash (buffer-hash))
        (org-save-outline-visibility t
          (org-babel-map-executables nil
            (condition-case err
                (if (memq (org-element-type (org-element-context))
                          '(babel-call inline-babel-call))
                    (org-babel-lob-execute-maybe)
                  (ignore-errors
                    (org-babel-execute-src-block t)))
              (err
               (record-error file "exec" (error-message-string err))))))
        (setq post-exec-hash (buffer-hash))
        (unless (string= pre-exec-hash post-exec-hash)
          (save-buffer)))

      (when (memq 'tang formats)
        (set-state file formats 'tangling)
        (condition-case err
            (org-babel-tangle nil nil nil)
          (error (record-error file "tangle" (error-message-string err))
                 (set-state file 'tang 'error))
          (t (set-state file 'tang 'completed))))

      (set-state file (remove 'tang formats) 'waiting)
      (unless async (org-export-expand-include-keyword))
      (dolist (fmt (remove 'tang formats))
        (let ((spec (assoc fmt export-specs)))
          (if async
              (let ((outfile (org-export-output-file-name (plist-get (cdr spec) :extension))))
                (push (list file spec
                            (if stdout (stdoutify-file file outfile) outfile))
                      export-async-job-queue))
            (condition-case err
                (export-file file spec)
              (error
               (record-error file (symbol-name fmt) (error-message-string err))
               (set-state file fmt 'error)))))))))

;; Do the exporting
(dolist (file files)
  (process-org-file file))

;; Wait for async processes
(when async
  (export-async-maybe-pop-queue)
  (while export-async-processes
    (export-check-async-processes)
    (export-progress-table)
    (sleep-for 0.1)))

;; Refresh the export table one more time to ensure it
;; reflects the final state
(export-progress-table)

;; Do stdout
(dolist (stdout-file stdout-tmp-files)
  (princ (with-temp-buffer (insert-file-contents-literally (cdr stdout-file)) (buffer-string)))
  (delete-file (cdr stdout-file)))
(when (and stdout tangle)
  (with-current-buffer tangle-buffer
    (princ (buffer-string))))

;; Set the right exit code
(if (not recorded-errors)
    (kill-emacs 0)
  (print-errors)
  (kill-emacs 1))

;;; org-knit ends here
